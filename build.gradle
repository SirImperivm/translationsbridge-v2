import groovy.json.JsonOutput

plugins {
    id 'java'
    id 'com.gradleup.shadow' version '8.3.1'
    id 'xyz.jpenilla.run-paper' version '3.0.2'
    id("xyz.jpenilla.run-velocity") version "3.0.2"
    id("xyz.jpenilla.run-waterfall") version "3.0.2"
    id 'maven-publish'
}

group = 'me.siridev'
description = 'TranslationsBridge'

def versionFile = file("$projectDir/version.txt")

if (!versionFile.exists()) {
    versionFile.text = "2.0.1"
}

def currentVersion = versionFile.text.trim()
def (major, minor, patch) = currentVersion.tokenize('.').collect { it as int }

def incrementPatch = {
    patch++
    if (patch >= 25) {
        patch = 0
        minor += 1
    }
    def newVersion = "${major}.${minor}.${patch}"
    versionFile.text = newVersion
    return newVersion
}

version = currentVersion

tasks.register("incrementVersion") {
    doLast {
        def newVersion = incrementPatch()
        println "âœ… Version incremented to: ${newVersion}"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { name = 'bungee' ; url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { name = 'papermc'; url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { name = 'spigotmc-repo'; url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { name = 'jitpack.io'; url = 'https://jitpack.io' }
}

dependencies {
    compileOnly "net.md-5:bungeecord-api:1.21-R0.4-SNAPSHOT"
    compileOnly "com.velocitypowered:velocity-api:3.4.0-SNAPSHOT"
    compileOnly "org.spigotmc:spigot-api:1.21.8-R0.1-SNAPSHOT"

    annotationProcessor("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")

    implementation 'com.github.lalyos:jfiglet:0.0.9'
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') { expand props }
}

ext.velocityPlugin = [
        id : "translationsbridge",
        name : "TranslationsBridge",
        version : version,
        description : "Gets the automatic translations for a plugin configuration.",
        authors : [ "SirImperivm_" ],
        main : "me.siridev.translationsBridge.velocity.TranslationsBridge"
]

tasks.register("velocityVersion") {
    doLast {
        def jsonFile = file("$projectDir/src/main/resources/velocity-plugin.json")
        jsonFile.parentFile.mkdirs()

        def jsonContent = JsonOutput.prettyPrint(JsonOutput.toJson(velocityPlugin))
        jsonFile.text = jsonContent

        println "ðŸ§© Generated velocity-plugin.json with version ${velocityPlugin.version}"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release = 21
    options.encoding = 'UTF-8'
}

tasks.shadowJar {
    dependsOn tasks.named("velocityVersion")
    archiveClassifier.set('')
    archiveFileName.set("${project.description}-${project.version}.jar")

    relocate 'com.github.lalyos', 'me.siridev.libs.com.github.lalyos'

    exclude('META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

tasks.build {
    dependsOn tasks.shadowJar
}

tasks.named('runServer') {
    minecraftVersion '1.21.8'
    runDirectory.set(layout.projectDirectory.dir('run\\paper'))
    jvmArgs('-Xmx1G', '-XX:+UseG1GC')
}

tasks.named('runVelocity') {
    velocityVersion("3.4.0-SNAPSHOT")
    runDirectory.set(layout.projectDirectory.dir('run\\velocity'))
    jvmArgs('-Xmx1G', '-XX:+UseG1GC')
}

tasks.named('runWaterfall') {
    waterfallVersion("1.21")
    runDirectory.set(layout.projectDirectory.dir('run\\waterfall'))
    jvmArgs('-Xmx1G', '-XX:+UseG1GC')
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            groupId = "me.siridev"
            artifactId = "translationsbridge-v2"
            version = currentVersion

            artifact(tasks.shadowJar) {
                builtBy tasks.shadowJar
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/SirImperivm/translationsbridge-v2")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}